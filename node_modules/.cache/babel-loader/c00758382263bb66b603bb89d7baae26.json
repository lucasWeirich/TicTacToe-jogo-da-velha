{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lucas\\\\Desktop\\\\ProjetosComReact\\\\jogo-da-velha\\\\src\\\\TicTacToe.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './TicTacToe.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TicTacToe() {\n  _s();\n\n  const emptyBoard = Array(9).fill(\"\");\n  const [board, setBoard] = useState(emptyBoard);\n  const [currentPlayer, setCurrentPlayer] = useState(\"O\");\n  const [winner, setWinner] = useState(null);\n\n  const handleCellClick = index => {\n    if (board[index] !== \"\") return null;\n    setBoard(board.map((item, itemIndex) => itemIndex === index ? currentPlayer : item));\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n  };\n\n  const checkWinner = () => {\n    const possibleWaysToWin = [[board[0], board[1], board[2]], [board[3], board[4], board[5]], [board[6], board[7], board[8]], [board[0], board[3], board[6]], [board[1], board[4], board[7]], [board[2], board[5], board[8]], [board[0], board[4], board[8]], [board[2], board[4], board[6]]];\n    possibleWaysToWin.forEach(cells => {\n      if (cells.every(cell => cell === \"O\")) setWinner(\"O\");\n      if (cells.every(cell => cell === \"X\")) setWinner(\"X\");\n    });\n  };\n\n  useEffect(checkWinner, [board]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Jogo da velha\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `board ${winner ? \"game-over\" : \"\"}`,\n      children: board.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${item}`,\n        onClick: () => handleCellClick(index),\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TicTacToe, \"ym/syiDrrGsHQvt3W2opgfxN1LI=\");\n\n_c = TicTacToe;\nexport default TicTacToe;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"sources":["C:/Users/lucas/Desktop/ProjetosComReact/jogo-da-velha/src/TicTacToe.jsx"],"names":["React","useState","useEffect","TicTacToe","emptyBoard","Array","fill","board","setBoard","currentPlayer","setCurrentPlayer","winner","setWinner","handleCellClick","index","map","item","itemIndex","checkWinner","possibleWaysToWin","forEach","cells","every","cell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TicTacToe.css';\n\nfunction TicTacToe() {\n\n  \n  const emptyBoard = Array(9).fill(\"\");\n  const [board, setBoard] = useState(emptyBoard);\n  const [currentPlayer, setCurrentPlayer] = useState(\"O\");\n  const [winner, setWinner] = useState(null);\n\n  const handleCellClick = (index) => {\n\n    if(board[index] !== \"\") return null;\n\n    setBoard(\n      board.map((item, itemIndex) => itemIndex === index ? currentPlayer : item)\n    );\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n  }\n\n  const checkWinner = () => {\n    const possibleWaysToWin = [\n      [board[0], board[1], board[2]],\n      [board[3], board[4], board[5]],\n      [board[6], board[7], board[8]],\n\n      [board[0], board[3], board[6]],\n      [board[1], board[4], board[7]],\n      [board[2], board[5], board[8]],\n\n      [board[0], board[4], board[8]],\n      [board[2], board[4], board[6]],\n    ];\n\n    possibleWaysToWin.forEach(cells => {\n      if(cells.every(cell => cell === \"O\")) setWinner(\"O\");\n      if(cells.every(cell => cell === \"X\")) setWinner(\"X\");\n    })\n\n  }\n\n  useEffect(checkWinner, [board]);\n\n\n  return (\n    <main>\n      <h1 className='title'>Jogo da velha</h1>\n\n      <div className={`board ${winner ? \"game-over\" : \"\"}`}>\n\n        {board.map((item, index) => (\n          <div\n            className={`cell ${item}`}\n            key={index}\n            onClick={() => handleCellClick(index)}\n          >\n            {item}\n          </div>\n        ))}\n\n\n      </div>\n\n    </main>\n  );\n}\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}